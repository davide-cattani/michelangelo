[{"/home/catta/lemurweb/michelangelo/src/index.js":"1","/home/catta/lemurweb/michelangelo/src/components/Appv2.js":"2","/home/catta/lemurweb/michelangelo/src/components/colorSelector.js":"3","/home/catta/lemurweb/michelangelo/src/utils/convertRgb.js":"4"},{"size":242,"mtime":1611597253505,"results":"5","hashOfConfig":"6"},{"size":7975,"mtime":1611610757130,"results":"7","hashOfConfig":"6"},{"size":332,"mtime":1611608311341,"results":"8","hashOfConfig":"6"},{"size":962,"mtime":1611595060559,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"jkm5sm",{"filePath":"13","messages":"14","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15","usedDeprecatedRules":"12"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18","usedDeprecatedRules":"12"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/catta/lemurweb/michelangelo/src/index.js",[],["21","22"],"/home/catta/lemurweb/michelangelo/src/components/Appv2.js",["23","24","25"],"import React, { useState, useRef, useEffect } from \"react\";\nimport { usePalette } from \"color-thief-react\";\nimport ReactLoading from \"react-loading\";\nimport { FiUpload } from \"react-icons/fi\";\n\nimport { invertColor } from \"../utils/convertRgb\";\nimport ColorSelector from \"./colorSelector\";\n\nconst App = () => {\n  const currentColor = useRef(null);\n  const fileInput = useRef(null);\n  const [image, setImage] = useState(`https://source.unsplash.com/random/`);\n  const { data, loading, error } = usePalette(image, 3, \"hex\", {\n    crossOrigin: \"\",\n    quality: 10,\n  });\n\n  const setInitialColors = () => {\n    console.log(\"set initial colors\");\n\n    if (!data || !data[0] || !data[1] || !data[2]) return;\n\n    document.documentElement.style.setProperty(\n      \"--first-selector-color\",\n      data[0]\n    );\n    document.documentElement.style.setProperty(\n      \"--second-selector-color\",\n      data[1]\n    );\n    document.documentElement.style.setProperty(\n      \"--third-selector-color\",\n      data[2]\n    );\n\n    document.documentElement.style.setProperty(\n      \"--first-color-inverted\",\n      invertColor(data[0], true)\n    );\n    document.documentElement.style.setProperty(\n      \"--second-color-inverted\",\n      invertColor(data[1], true)\n    );\n    document.documentElement.style.setProperty(\n      \"--third-color-inverted\",\n      invertColor(data[2], true)\n    );\n\n    document.documentElement.style.setProperty(\"--first-color\", data[0]);\n    document.documentElement.style.setProperty(\"--second-color\", data[1]);\n    document.documentElement.style.setProperty(\"--third-color\", data[2]);\n  };\n\n  const handleColorSelectorPressed = (event, color) => {\n    event.preventDefault();\n\n    console.log(\"color\", color);\n\n    switch (color) {\n      case \"first\":\n        setInitialColors();\n        break;\n      case \"second\":\n        document.documentElement.style.setProperty(\"--first-color\", data[1]);\n        document.documentElement.style.setProperty(\"--second-color\", data[2]);\n        document.documentElement.style.setProperty(\"--third-color\", data[0]);\n\n        document.documentElement.style.setProperty(\n          \"--first-color-inverted\",\n          invertColor(data[1], true)\n        );\n        break;\n      case \"third\":\n        document.documentElement.style.setProperty(\"--first-color\", data[2]);\n        document.documentElement.style.setProperty(\"--second-color\", data[0]);\n        document.documentElement.style.setProperty(\"--third-color\", data[1]);\n\n        document.documentElement.style.setProperty(\n          \"--first-color-inverted\",\n          invertColor(data[2], true)\n        );\n        break;\n      case \"light\":\n        document.documentElement.style.setProperty(\"--first-color\", \"#FEFEFE\");\n        document.documentElement.style.setProperty(\"--second-color\", \"#202020\");\n        document.documentElement.style.setProperty(\"--third-color\", \"#202020\");\n\n        document.documentElement.style.setProperty(\n          \"--first-color-inverted\",\n          invertColor(\"#FEFEFE\", true)\n        );\n        break;\n      case \"dark\":\n        document.documentElement.style.setProperty(\"--first-color\", \"#202020\");\n        document.documentElement.style.setProperty(\"--second-color\", \"#FEFEFE\");\n        document.documentElement.style.setProperty(\"--third-color\", \"#FEFEFE\");\n\n        document.documentElement.style.setProperty(\n          \"--first-color-inverted\",\n          invertColor(\"#202020\", true)\n        );\n        break;\n    }\n\n    currentColor.current.innerText = document.documentElement.style.getPropertyValue(\n      \"--first-color\"\n    );\n  };\n\n  const handleFileUploaded = (event) => {\n    console.log(\"file\", event.target.files[0]);\n    setImage(URL.createObjectURL(event.target.files[0]));\n    setInitialColors();\n  };\n\n  const handleImageClicked = (event) => {\n    event.preventDefault();\n    fileInput.current.click();\n  };\n\n  if (loading || error) {\n    return (\n      <div className=\"loading\">\n        <ReactLoading\n          type={\"spokes\"}\n          color={\"#FEFEFE\"}\n          height={\"10vh\"}\n          width={\"10vh\"}\n        />\n        {loading && `Michelangelo is painting..`}\n        {error && error}\n      </div>\n    );\n  }\n\n  if (data) {\n    console.log(\"data\", data);\n\n    setInitialColors();\n\n    return (\n      <section className=\"michelangelo hero is-fullheight\">\n        <div className=\"hero-body\">\n          <div className=\"container\">\n            {/* top-level columns */}\n            <div className=\"centered-content columns is-vcentered is-centered\">\n              <div className=\"column has-text-centered mt-3 header-text\">\n                <h1 className=\" header-text subtitle is-size-2-mobile is-size-1-desktop is-family-secondary mb-0\">\n                  Michelangelo{\" \"}\n                  <span className=\"is-size-6-mobile is-size-5-desktop lemurweb is-family-primary\">\n                    by <a href=\"https://www.lemurweb.dev\">lemurweb</a>\n                  </span>\n                </h1>\n                <p className=\"is-size-6 is-family-primary\">\n                  Cambia l'immagine toccandola\n                </p>\n                <p className=\"is-size-6 is-family-primary\">\n                  Cambia il colore di sfondo toccando uno dei 5 colori\n                </p>\n                <div className=\"file is-centered\">\n                  <label className=\"file-label is-invisible is-hidden\">\n                    <input\n                      ref={fileInput}\n                      className=\"file-input\"\n                      type=\"file\"\n                      name=\"image\"\n                      onChange={(event) => handleFileUploaded(event)}\n                      \n                    />\n                    <span className=\"file-cta has-text-centered\">\n                      <FiUpload />\n                    </span>\n                  </label>\n                </div>\n                <div className=\"columns is-centered is-multiline is-mobile is-gapless mt-1 is-family-monospace is-uppercase is-size-7\">\n                  <div className=\"column m-2 is-narrow \">\n                    <ColorSelector\n                      color={\"first\"}\n                      colorSelected={handleColorSelectorPressed}\n                    />\n                  </div>\n                  <div className=\"column m-2 is-narrow \">\n                    <ColorSelector\n                      color={\"second\"}\n                      display\n                      colorSelected={handleColorSelectorPressed}\n                    />\n                  </div>\n                  <div className=\"column m-2 is-narrow \">\n                    <ColorSelector\n                      color={\"third\"}\n                      colorSelected={handleColorSelectorPressed}\n                    />\n                  </div>\n                  <div className=\"column m-2 is-narrow \">\n                    <ColorSelector\n                      color={\"light\"}\n                      colorSelected={handleColorSelectorPressed}\n                    />\n                  </div>\n                  <div className=\"column m-2 is-narrow \">\n                    <ColorSelector\n                      color={\"dark\"}\n                      colorSelected={handleColorSelectorPressed}\n                    />\n                  </div>\n                </div>\n              </div>\n              <div className=\"column has-text-centered\">\n                <img\n                  crossOrigin={\"anonymous\"}\n                  src={image}\n                  alt={\"the image on the wall\"}\n                  className=\"painting is-clickable\"\n                  onClick={(event) => {\n                    handleImageClicked(event);\n                  }}\n                />\n                <p\n                  ref={currentColor}\n                  className=\"has-text-centered header-text is-family-monospace is-uppercase is-size-7 mt-3\"\n                ></p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n    );\n  }\n\n  return <div>LOADING</div>;\n};\n\nexport default App;\n","/home/catta/lemurweb/michelangelo/src/components/colorSelector.js",["26"],"import Color from \"color-thief-react\";\nimport React from \"react\";\n\nconst ColorSelector = ({ color, colorSelected }) => {\n  return (\n    <div\n      className={`is-clickable selector ${color}-color-selector`}\n      onClick={(event) => {colorSelected(event, color)}}\n    >\n      {\" \"}\n    </div>\n  );\n};\n\nexport default ColorSelector;\n","/home/catta/lemurweb/michelangelo/src/utils/convertRgb.js",[],{"ruleId":"27","replacedBy":"28"},{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","severity":1,"message":"32","line":1,"column":35,"nodeType":"33","messageId":"34","endLine":1,"endColumn":44},{"ruleId":"35","severity":1,"message":"36","line":59,"column":5,"nodeType":"37","messageId":"38","endLine":103,"endColumn":6},{"ruleId":"39","severity":1,"message":"40","line":210,"column":17,"nodeType":"41","endLine":218,"endColumn":19},{"ruleId":"31","severity":1,"message":"42","line":1,"column":8,"nodeType":"33","messageId":"34","endLine":1,"endColumn":13},"no-native-reassign",["43"],"no-negated-in-lhs",["44"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","'Color' is defined but never used.","no-global-assign","no-unsafe-negation"]